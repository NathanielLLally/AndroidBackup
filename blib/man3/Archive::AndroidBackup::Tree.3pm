.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Archive::AndroidBackup::Tree 3"
.TH Archive::AndroidBackup::Tree 3 "2015-11-14" "perl v5.24.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
.Vb 1
\&  Archive::AndroidBackup::Tree
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  my $trunk = Tree\->new;
\&  $trunk\->node(\*(Aqroot\*(Aq);
\&  $trunk = $trunk\->get_or_add_child(\*(Aqbranch.1\*(Aq);
\&  $trunk = $trunk\->get_or_add_child(\*(Aqbranch.1\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 3
\&  There are many other more mature implementations of trees out there
\&  Tree, Tree::Fast, Tree::Simple, Forrest::Tree and I can\*(Aqt think of a reason that makes mine better
\&  I just wanted to spend the time writing a tree class with moose using weak refs and attribute traits
.Ve
.SS "add_child(;$node)"
.IX Subsection "add_child(;$node)"
.Vb 1
\&  add a new child to tree
.Ve
.SS "get_or_add_child($node);"
.IX Subsection "get_or_add_child($node);"
.Vb 3
\&  adds a child with $node as its data or get an existing child 
\&  returns an un\-intialized orphan if node is undef
\&    *this will be added to the family upon setting node
.Ve
.SS "\fInode_as_string()\fP"
.IX Subsection "node_as_string()"
.Vb 1
\&  represent node value as string
.Ve
.SS "as_string"
.IX Subsection "as_string"
.Vb 1
\&  print node via node_as_string, then recurse to children
.Ve
.SS "traverse_depth(;sortCallback)"
.IX Subsection "traverse_depth(;sortCallback)"
.Vb 2
\&  returns array of nodes with a depth first search
\&  if a sort function is passed, every node\*(Aqs children will be sorted prior to recursion
\&
\&  to perform a search while sorting on first the existence of grand children
\&  then alphabetically on node\*(Aqs value
\&
\&  my $sortFunc = sub($$) {
\&      $_[0]\->has_children <=> $_[1]\->has_children
\&        ||
\&      $_[0]\->node cmp $_[1]\->node;
\&    };
\&  
\&  my @list = grep {
\&    /(some|keyword)/
\&  } map {
\&    $_\->node_as_string
\&  } $self\->traverse_depth($sortFunc);
.Ve
